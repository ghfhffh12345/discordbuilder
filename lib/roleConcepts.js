const { PermissionsBitField } = require("discord.js");

const concepts = {
  role: {
    administrator: [PermissionsBitField.Flags.Administrator],
    manager: [
      PermissionsBitField.Flags.BanMembers,
      PermissionsBitField.Flags.KickMembers,
      PermissionsBitField.Flags.ManageChannels,
      PermissionsBitField.Flags.PrioritySpeaker,
      PermissionsBitField.Flags.MoveMembers,
      PermissionsBitField.Flags.ManageNicknames,
      PermissionsBitField.Flags.ManageEvents,
    ],
    supporter: [
      PermissionsBitField.Flags.AddReactions,
      PermissionsBitField.Flags.ViewAuditLog,
      PermissionsBitField.Flags.ManageMessages,
      PermissionsBitField.Flags.MentionEveryone,
      PermissionsBitField.Flags.ManageWebhooks,
      PermissionsBitField.Flags.ManageGuildExpressions,
      PermissionsBitField.Flags.ManageThreads,
      PermissionsBitField.Flags.CreatePrivateThreads,
      PermissionsBitField.Flags.ModerateMembers,
      PermissionsBitField.Flags.MuteMembers,
      PermissionsBitField.Flags.DeafenMembers,
    ],
    member: [
      PermissionsBitField.Flags.CreateInstantInvite,
      PermissionsBitField.Flags.Stream,
      PermissionsBitField.Flags.SendMessages,
      PermissionsBitField.Flags.SendTTSMessages,
      PermissionsBitField.Flags.EmbedLinks,
      PermissionsBitField.Flags.AttachFiles,
      PermissionsBitField.Flags.UseExternalEmojis,
      PermissionsBitField.Flags.Connect,
      PermissionsBitField.Flags.Speak,
      PermissionsBitField.Flags.UseVAD,
      PermissionsBitField.Flags.UseApplicationCommands,
      PermissionsBitField.Flags.RequestToSpeak,
      PermissionsBitField.Flags.CreatePublicThreads,
      PermissionsBitField.Flags.UseExternalStickers,
      PermissionsBitField.Flags.SendMessagesInThreads,
      PermissionsBitField.Flags.UseEmbeddedActivities,
      PermissionsBitField.Flags.UseSoundboard,
      PermissionsBitField.Flags.UseExternalSounds,
      PermissionsBitField.Flags.SendVoiceMessages,
    ],
    viewer: [
      PermissionsBitField.Flags.ViewChannel,
      PermissionsBitField.Flags.ReadMessageHistory,
      PermissionsBitField.Flags.ViewGuildInsights,
      PermissionsBitField.Flags.ChangeNickname,
      PermissionsBitField.Flags.ViewCreatorMonetizationAnalytics,
    ],
  },
  /** @type {{manager: import("discord.js").PermissionOverwriteOptions, supporter: import("discord.js").PermissionOverwriteOptions, member: import("discord.js").PermissionOverwriteOptions, viewer: import("discord.js").PermissionOverwriteOptions, empty: import("discord.js").PermissionOverwriteOptions}} */
  channel: {
    manager: {
      ViewChannel: true,
      ManageChannels: true,
      ManageRoles: false,
      ManageWebhooks: true,
      CreateInstantInvite: true,
      SendMessages: true,
      SendMessagesInThreads: true,
      CreatePublicThreads: true,
      CreatePrivateThreads: true,
      EmbedLinks: true,
      AttachFiles: true,
      AddReactions: true,
      UseExternalEmojis: true,
      UseExternalStickers: true,
      MentionEveryone: true,
      ManageMessages: true,
      ManageThreads: true,
      ReadMessageHistory: true,
      SendTTSMessages: true,
      UseApplicationCommands: true,
      SendVoiceMessages: true,
      UseEmbeddedActivities: true,
      Connect: true,
      Speak: true,
      Stream: true,
      UseSoundboard: true,
      UseExternalSounds: true,
      UseVAD: true,
      PrioritySpeaker: true,
      MuteMembers: true,
      DeafenMembers: true,
      MoveMembers: true,
      ManageEvents: true,
    },
    supporter: {
      ViewChannel: true,
      ManageChannels: false,
      ManageRoles: false,
      ManageWebhooks: true,
      CreateInstantInvite: true,
      SendMessages: true,
      SendMessagesInThreads: true,
      CreatePublicThreads: true,
      CreatePrivateThreads: true,
      EmbedLinks: true,
      AttachFiles: true,
      AddReactions: true,
      UseExternalEmojis: true,
      UseExternalStickers: true,
      MentionEveryone: true,
      ManageMessages: true,
      ManageThreads: true,
      ReadMessageHistory: true,
      SendTTSMessages: true,
      UseApplicationCommands: true,
      SendVoiceMessages: true,
      UseEmbeddedActivities: true,
      Connect: true,
      Speak: true,
      Stream: true,
      UseSoundboard: true,
      UseExternalSounds: true,
      UseVAD: true,
      PrioritySpeaker: false,
      MuteMembers: true,
      DeafenMembers: true,
      MoveMembers: true,
      ManageEvents: false,
    },
    member: {
      ViewChannel: true,
      ManageChannels: false,
      ManageRoles: false,
      ManageWebhooks: false,
      CreateInstantInvite: true,
      SendMessages: true,
      SendMessagesInThreads: true,
      CreatePublicThreads: true,
      CreatePrivateThreads: false,
      EmbedLinks: true,
      AttachFiles: true,
      AddReactions: false,
      UseExternalEmojis: true,
      UseExternalStickers: true,
      MentionEveryone: false,
      ManageMessages: false,
      ManageThreads: false,
      ReadMessageHistory: true,
      SendTTSMessages: true,
      UseApplicationCommands: true,
      SendVoiceMessages: true,
      UseEmbeddedActivities: true,
      Connect: true,
      Speak: true,
      Stream: true,
      UseSoundboard: true,
      UseExternalSounds: true,
      UseVAD: true,
      PrioritySpeaker: false,
      MuteMembers: false,
      DeafenMembers: false,
      MoveMembers: false,
      ManageEvents: false,
    },
    viewer: {
      ViewChannel: true,
      ManageChannels: false,
      ManageRoles: false,
      ManageWebhooks: false,
      CreateInstantInvite: false,
      SendMessages: false,
      SendMessagesInThreads: false,
      CreatePublicThreads: false,
      CreatePrivateThreads: false,
      EmbedLinks: false,
      AttachFiles: false,
      AddReactions: false,
      UseExternalEmojis: false,
      UseExternalStickers: false,
      MentionEveryone: false,
      ManageMessages: false,
      ManageThreads: false,
      ReadMessageHistory: true,
      SendTTSMessages: false,
      UseApplicationCommands: false,
      SendVoiceMessages: false,
      UseEmbeddedActivities: false,
      Connect: false,
      Speak: false,
      Stream: false,
      UseSoundboard: false,
      UseExternalSounds: false,
      UseVAD: false,
      PrioritySpeaker: false,
      MuteMembers: false,
      DeafenMembers: false,
      MoveMembers: false,
      ManageEvents: false,
    },
    empty: {
      ViewChannel: false,
      ManageChannels: false,
      ManageRoles: false,
      ManageWebhooks: false,
      CreateInstantInvite: false,
      SendMessages: false,
      SendMessagesInThreads: false,
      CreatePublicThreads: false,
      CreatePrivateThreads: false,
      EmbedLinks: false,
      AttachFiles: false,
      AddReactions: false,
      UseExternalEmojis: false,
      UseExternalStickers: false,
      MentionEveryone: false,
      ManageMessages: false,
      ManageThreads: false,
      ReadMessageHistory: false,
      SendTTSMessages: false,
      UseApplicationCommands: false,
      SendVoiceMessages: false,
      UseEmbeddedActivities: false,
      Connect: false,
      Speak: false,
      Stream: false,
      UseSoundboard: false,
      UseExternalSounds: false,
      UseVAD: false,
      PrioritySpeaker: false,
      MuteMembers: false,
      DeafenMembers: false,
      MoveMembers: false,
      ManageEvents: false,
    },
  },
};

const conceptsName = {
  administrator: 5,
  manager: 4,
  supporter: 3,
  member: 2,
  viewer: 1,
  empty: 0,
};

/** @param {"administrator" | "manager" | "supporter" | "member" | "viewer" | "empty"} concept */
const getRolePermission = (concept) => {
  const index = conceptsName[concept];

  if (index == 5) return concepts.role.administrator;

  const permissions = [];

  if (index >= 1) {
    permissions.push(...concepts.role.viewer);
    if (index >= 2) {
      permissions.push(...concepts.role.member);
      if (index >= 3) {
        permissions.push(...concepts.role.supporter);
        if (index == 4) {
          permissions.push(...concepts.role.manager);
        }
      }
    }
  }

  return permissions;
};

module.exports = { concepts, getRolePermission };
